var members = data.results[0].members;

if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/senate-data.html' || location.pathname == "/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/house-data.html") {

    // Step 1. The var newMembArray = {..} contains a "results" field. The "results" field contains an array (members) -- ACCESS that ARRAY.

    
    var democratButton = document.getElementById("democrat-button");
    var independentButton = document.getElementById("independent-button");
    var republicanButton = document.getElementById("republican-button");
     var input = document.getElementById("state-filter")
    input.addEventListener("change", printFilteredTable);
    democratButton.addEventListener("click", printFilteredTable);
    republicanButton.addEventListener("click", printFilteredTable);
    independentButton.addEventListener("click", printFilteredTable);


    /*Call the function generateTable && the function createNewArray at the beginning, so that once the page in open, a table is generated with the "var members" info */
    createDropOptions();
    generateTable(createNewArray(members));

    //Call the function printFilteredTable() on click.
   

    function printFilteredTable() {
        generateTable(createNewArray(filterMembers()))
    }


    /* create a new array (newMembArray === each member profile) containing only the properties needed.
       - the .map() method iterate through each element of the array
       - then, it creates a function that perform like this: 
         inside the new array(newMembArray) STORE only the elements with the following properties: */


    function createNewArray(member) {

        return member.map(person => ({
                Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                //to join all these values inside one property.
                Party: person.party,
                State: person.state,
                Seniority: person.seniority,
                Votes: person.votes_with_party_pct
            }

        ))
    }

    // Generate a table to display the new array generated by createNewArray() function.

    function generateTable(newMembArray) {

        var table = document.getElementById("dataTable"); //give this ID to the table in HTML of both House and Senate Page 
        table.innerHTML = "";
        var header = table.createTHead();
        var rowHead = header.insertRow(0);

        var name = rowHead.insertCell(0);
        name.innerHTML = "Name";
        var party = rowHead.insertCell(1);
        party.innerHTML = "Party";
        var state = rowHead.insertCell(2);
        state.innerHTML = "State";
        var seniority = rowHead.insertCell(3);
        seniority.innerHTML = "Seniority";
        var votes = rowHead.insertCell(4);
        votes.innerHTML = "Votes";

        var body = document.createElement("tbody");

        for (var i = 0; i < newMembArray.length; i++) {

            var row = body.insertRow(i);

            for (key in newMembArray[i]) {

                var cell = row.insertCell();
                var cellContent = newMembArray[i][key];

                if (key === 'Name') {

                    var cellLink = members[i].url;
                    cell.innerHTML = cellContent.link(cellLink);

                } else if (key === 'Votes') {

                    cell.innerHTML = cellContent + ' %';
                } else {

                    cell.innerHTML = cellContent;
                }
            }

        };

        table.append(body); //the append() method inserts specified content(body) at the end of the selected elements(table)

    };

    // Create a new array of only filtered values by using .filter() on the members array -- push those values inside the checkboxesValuesArray.

    function filterMembers() {

        var checkboxesValuesArray = []; //Get 'checked' values from checkboxes and store them in a new array.
        for (var i = 0; i < members.length; i++) {

            if (input.value == "Select a state" || input.value == members[i].state) {

                if (members[i].party == "D" && democratButton.checked == true) {
                    checkboxesValuesArray.push(members[i]);
                    document.getElementById("alertSelection").style.display = "none";

                } else if (members[i].party == "R" && republicanButton.checked == true) {
                    checkboxesValuesArray.push(members[i]);
                    document.getElementById("alertSelection").style.display = "none";

                } else if (members[i].party == "I" && independentButton.checked == true) {
                    checkboxesValuesArray.push(members[i]);
                    document.getElementById("alertSelection").style.display = "none";

                } else if (democratButton.checked == false && republicanButton.checked == false && independentButton.checked == false) {

                    document.getElementById("alertSelection").style.display = "block";

                }
            }
        }

        return checkboxesValuesArray;
    }


    //Generate a dropdown menu with "state" options.
    function createDropOptions() {

        console.log(input)
        var optionsArray = members.map(getState => getState.state);
        optionsArray.sort();

        var stateArray = optionsArray.filter(function (item, index) {
            return optionsArray.indexOf(item) == index;
        })

        for (var i = 0; i < stateArray.length; i++) {
            var stateSelection = stateArray[i];
            var dropElement = document.createElement("option");
            dropElement.textContent = stateSelection;
            dropElement.value = stateSelection;
            input.appendChild(dropElement);
        }
    }

}    
//TASK 3
    
//Create a Json Object with a key for each statistic that will be displayed in the tables
var statistics = [
                 { //Senate at a glance table
                  "tot_democrat": totalMembersPerParty("D").length,
                  "tot_republican": totalMembersPerParty("R").length,
                  "tot_independent": totalMembersPerParty("I").length,
                  "tot_represantives": totalMembersPerParty("D").length + totalMembersPerParty("R").length + totalMembersPerParty("I").length,
                  "democrats_average_votes_with_party": (sumPercentByParty(totalMembersPerParty("D"))/ totalMembersPerParty("D").length).toFixed(2),
                  "republican_average_votes_with_party": (sumPercentByParty(totalMembersPerParty("R"))/ totalMembersPerParty("R").length).toFixed(2),
                  "independent_average_votes_with_party": (sumPercentByParty(totalMembersPerParty("I"))/ totalMembersPerParty("I").length).toFixed(2),
                  "percentage_votes_with_party": ((sumPercentByParty(totalMembersPerParty("D"))/ totalMembersPerParty("D").length + sumPercentByParty(totalMembersPerParty("R"))/ totalMembersPerParty("R").length + sumPercentByParty(totalMembersPerParty("I"))/ totalMembersPerParty("I").length) / 3).toFixed(2)
  
                  },
                  { //Engagement table (attendance pages)
                  "least_engaged": lowestTenPercentOfEngaged().map(person => ({ 
                                          Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                                          Votes: person.missed_votes,
                                          VotesPerc: person.missed_votes_pct})),
                  "most_engaged": greaterTenPercentOfEngaged().map(person => ({ 
                                          Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                                          Votes: person.missed_votes,
                                          VotesPerc: person.missed_votes_pct}))
                  },
                  { //Loyalty table (loyalty pages)
                  "least_loyal": lowestTenPercentOfVoters().map(person => ({ 
                                          Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                                          Votes: person.total_votes,
                                          VotesPerc: person.votes_with_party_pct })),
                  "most_loyal": greaterTenPercentOfVoters().map(person => ({ 
                                          Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                                          Votes: person.total_votes,
                                          VotesPerc: person.votes_with_party_pct }))
                      
                  }
                  ]


//Find how many members are in each party
function totalMembersPerParty (party) {
    var total = members.filter(member => member.party === party);
    return total;
}


    // 2. create a function to find the TOT % of voting for each party
function sumPercentByParty(array){

    var totalPercent = array.reduce((accumulator, percentage) => accumulator + percentage.votes_with_party_pct, 0);
    return totalPercent;
    
}    
    
// 3. create a function to find the AVERAGE % of voting for each party (divide the tot % / nÂ° of members for each party)
function findAvarage(totPercentArray, arrayLenght){
    
    var average = totPercentArray / arrayLenght;
    return average;
    
} 
    
        
/* -------------------------------------------------------------------------------------------   */ 

//Find least loyal    
function lowestTenPercentOfVoters() { 
    var votes = [];
    var lowestTenPercent = [];
    
    members.sort(function (a, b) {
        return a.votes_with_party_pct - b.votes_with_party_pct;
    });
    for (i = 0; i < members.length; i++) {
        votes.push(members[i]);
    }
    for (i = 0; i < votes.length; i++) {
        if (i < ((votes.length) * 0.1)) {
            lowestTenPercent.push(votes[i]);
        } else if (votes[i] == votes[i - 1]) {
            lowestTenPercent.push(votes[i]);
        } 
    }
    return lowestTenPercent;
}

//Find most loyal     
function greaterTenPercentOfVoters() { 
    var votes = [];
    var greaterTenPercent = [];
    
    members.sort(function (a, b) {
        return b.votes_with_party_pct - a.votes_with_party_pct;
    });
    for (i = 0; i < members.length; i++) {
        votes.push(members[i]);
    }
    for (i = 0; i < votes.length; i++) {
        if (i < ((votes.length) * 0.1)) {
            greaterTenPercent.push(votes[i]);
        } else if (votes[i] == votes[i - 1]) {
            greaterTenPercent.push(votes[i]);
        } 
    }
    return greaterTenPercent;
}    

/* ------------------------------------------------------------------------------------------------------------ */

//Find least engaged     
function lowestTenPercentOfEngaged() { 
    var votes = [];
    var lowestTenPercent = [];
    
    members.sort(function (a, b) {
        return a.missed_votes_pct - b.missed_votes_pct;
    });
    for (i = 0; i < members.length; i++) {
        votes.push(members[i]);
    }
    for (i = 0; i < votes.length; i++) {
        if (i < ((votes.length) * 0.1)) {
            lowestTenPercent.push(votes[i]);
        } else if (votes[i] == votes[i - 1]) {
            lowestTenPercent.push(votes[i]);
        } 
    }
    return lowestTenPercent;
}

//Find most engaged     
function greaterTenPercentOfEngaged() { 
    var votes = [];
    var greaterTenPercent = [];
    
    members.sort(function (a, b) {
        return b.missed_votes_pct - a.missed_votes_pct;
    });
    for (i = 0; i < members.length; i++) {
        votes.push(members[i]);
    }
    for (i = 0; i < votes.length; i++) {
        if (i < ((votes.length) * 0.1)) {
            greaterTenPercent.push(votes[i]);
        } else if (votes[i] == votes[i - 1]) {
            greaterTenPercent.push(votes[i]);
        }
    }
    return greaterTenPercent;
}


/*--------------------------------------------------------*/
//Creates arrays to work with in order to create the tables.

var senate = statistics[0];
var senateAtGlance = Object.values(senate);
var engagementTable = statistics[1];
var loyaltyTable = statistics[2];

//Function to create the 'Senate at a glance' table
createGlanceTable(senateAtGlance);
function createGlanceTable(array){
    
    var demoRow = document.createElement("tr");
    
    var democrats = demoRow.insertCell();
    democrats.innerHTML= "Democrats";
    var demoTotal = demoRow.insertCell();
    demoTotal.innerHTML = statistics[0]["tot_democrat"];
    var demoAve = demoRow.insertCell();
    demoAve.innerHTML = array[4] + ' %';
    
    var repRow = document.createElement("tr");
    
    var republicans = repRow.insertCell();
    republicans.innerHTML= "Republicans";
    var repTotal = repRow.insertCell();
    repTotal.innerHTML = statistics[0]["tot_republican"];
    var repAve = repRow.insertCell();
    repAve.innerHTML = array[5] + ' %';
    
    var indRow = document.createElement("tr");
    
    var independent = indRow.insertCell();
    independent.innerHTML= "Independent";
    var indTotal = indRow.insertCell();
    indTotal.innerHTML = statistics[0]["tot_independent"];
    var indAve = indRow.insertCell();
    indAve.innerHTML = array[6] + ' %';
    
    var totRow = document.createElement("tr");
    
    var totRepres = totRow.insertCell();
    totRepres.innerHTML= "Total";
    var numRepres = totRow.insertCell();
    numRepres.innerHTML = statistics[0]["tot_represantives"];
    var prcVotes = totRow .insertCell();
    prcVotes.innerHTML = array[7] + ' %';
    
    document.getElementById("glance-table-body").appendChild(demoRow);
    document.getElementById("glance-table-body").appendChild(repRow);
    document.getElementById("glance-table-body").appendChild(indRow);
    document.getElementById("glance-table-body").appendChild(totRow);
}

/*
createBigTable(engagementTable["least_engaged"]);

function createBigTable (array) {
    for (var i = 0; i < array.length; i ++){
        
        var row = document.createElement("tr");
        var names = document.createElement("td");
        names.innerHTML = array[i]["Name"];
        var votes = document.createElement("td");
        votes.innerHTML = array[i]["Votes"];
        var prc = document.createElement("td");
        prc.innerHTML = array[i]["VotesPerc"];
        
        row.appendChild(names)
        row.appendChild(votes)
        row.appendChild(prc)
        document.getElementById("least-engaged-table").appendChild(row);
      //  document.getElementById("most-engaged-table").appendChild(row);
        
    }
  
} */

/*---------------------------------------------------------------------------------*/    
