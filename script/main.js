var members;
//Senate & House Pages
if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/senate-data.html' || location.pathname == "/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/house-data.html") {

    var democratButton = document.getElementById("democrat-button");
    var independentButton = document.getElementById("independent-button");
    var republicanButton = document.getElementById("republican-button");
    var input = document.getElementById("state-filter")

    if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/senate-data.html') {
        getData("senate");
    }
    if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/house-data.html') {
        getData("house");
    }


    function getData(chamber) {
        fetch("https://api.propublica.org/congress/v1/113/" + chamber + "/members.json", {

                method: "GET",
                headers: new Headers({
                    "X-API-Key": '8pToDd0vDGdgeKF7E7BH3SfKcegp4QMJowvY45sN'
                })
            })

            .then(function (response) {
                return response.json();
            }).then(function (json) {
                data = json;
                members = data.results[0].members;
                input.addEventListener("change", printFilteredTable);
                democratButton.addEventListener("click", printFilteredTable);
                republicanButton.addEventListener("click", printFilteredTable);
                independentButton.addEventListener("click", printFilteredTable);

                createDropOptions();
                generateTable(createNewArray(members));


            }).catch(function (error) {
                console.log(error)
            })
    }


    function printFilteredTable() {
        generateTable(createNewArray(filterMembers()))
    }

    function createNewArray(member) {

        return member.map(person => ({
                Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                //to join all these values inside one property.
                Party: person.party,
                State: person.state,
                Seniority: person.seniority,
                Votes: person.votes_with_party_pct
            }

        ))
    }

    // Generate a table to display the new array generated by createNewArray() function.

    function generateTable(newMembArray) {

        var table = document.getElementById("dataTable"); //give this ID to the table in HTML of both House and Senate Page 
        table.innerHTML = "";
        var header = table.createTHead();
        var rowHead = header.insertRow(0);

        var name = rowHead.insertCell(0);
        name.innerHTML = "Name";
        var party = rowHead.insertCell(1);
        party.innerHTML = "Party";
        var state = rowHead.insertCell(2);
        state.innerHTML = "State";
        var seniority = rowHead.insertCell(3);
        seniority.innerHTML = "Seniority";
        var votes = rowHead.insertCell(4);
        votes.innerHTML = "Votes";

        var body = document.createElement("tbody");

        for (var i = 0; i < newMembArray.length; i++) {

            var row = body.insertRow(i);

            for (key in newMembArray[i]) {

                var cell = row.insertCell();
                var cellContent = newMembArray[i][key];

                if (key === 'Name') {

                    var cellLink = members[i].url;
                    cell.innerHTML = cellContent.link(cellLink);

                } else if (key === 'Votes') {

                    cell.innerHTML = cellContent + ' %';
                } else {

                    cell.innerHTML = cellContent;
                }
            }

        };

        table.append(body); //the append() method inserts specified content(body) at the end of the selected elements(table)

    };

    // Create a new array of only filtered values by using .filter() on the members array -- push those values inside the checkboxesValuesArray.

    function filterMembers() {

        var checkboxesValuesArray = []; //Get 'checked' values from checkboxes and store them in a new array.
        for (var i = 0; i < members.length; i++) {

            if (input.value == "Select a state" || input.value == members[i].state) {

                if (members[i].party == "D" && democratButton.checked == true) {
                    checkboxesValuesArray.push(members[i]);
                    document.getElementById("alertSelection").style.display = "none";

                } else if (members[i].party == "R" && republicanButton.checked == true) {
                    checkboxesValuesArray.push(members[i]);
                    document.getElementById("alertSelection").style.display = "none";

                } else if (members[i].party == "I" && independentButton.checked == true) {
                    checkboxesValuesArray.push(members[i]);
                    document.getElementById("alertSelection").style.display = "none";

                } else if (democratButton.checked == false && republicanButton.checked == false && independentButton.checked == false) {

                    document.getElementById("alertSelection").style.display = "block";

                }
            }
        }

        return checkboxesValuesArray;
    }


    //Generate a dropdown menu with "state" options.
    function createDropOptions() {

        console.log(input)
        var optionsArray = members.map(getState => getState.state);
        optionsArray.sort();

        var stateArray = optionsArray.filter(function (item, index) {
            return optionsArray.indexOf(item) == index;
        })

        for (var i = 0; i < stateArray.length; i++) {
            var stateSelection = stateArray[i];
            var dropElement = document.createElement("option");
            dropElement.textContent = stateSelection;
            dropElement.value = stateSelection;
            input.appendChild(dropElement);
        }
    }

}

//Attendance Pages &  'At a Glance Table' 
if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/house-attendance.html' || location.pathname == "/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/senate-attendance.html" || location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/house-party-loyalty.html' || location.pathname == "/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/senate-party-loyalty.html") {

    //declare global variables to use in the page
    var statistics;
    var glance;
    var tableAtGlance;
    var engagementTable;

    if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/senate-attendance.html' || location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/senate-party-loyalty.html') {
        getData("senate");
    }
    if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/house-attendance.html' || location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/house-party-loyalty.html') {
        getData("house");
    }

    function getData(chamber) {
        fetch("https://api.propublica.org/congress/v1/113/" + chamber + "/members.json", {

                method: "GET",
                headers: new Headers({
                    "X-API-Key": '8pToDd0vDGdgeKF7E7BH3SfKcegp4QMJowvY45sN'
                })
            })

            .then(function (response) {
                return response.json();
            }).then(function (json) {
                data = json;
                members = data.results[0].members;

                statistics = [
                    { //Senate at a glance table
                        "tot_democrat": totalMembersPerParty("D").length,
                        "tot_republican": totalMembersPerParty("R").length,
                        "tot_independent": totalMembersPerParty("I").length,
                        "tot_represantives": totalMembersPerParty("D").length + totalMembersPerParty("R").length + totalMembersPerParty("I").length,
                        "democrats_avg_votes_with_party": findAverageParty("D"),
                        "republican_avg_votes_with_party": findAverageParty("R"),
                        "independent_avg_votes_with_party": findAverageParty("I"),
                        "percentage_votes_with_party": sumAvgTotal(),

                  },
                    { //Engagement table 
                        "least_engaged": lowestTenPercentOfEngaged().map(person => ({
                            Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                            Votes: person.missed_votes,
                            VotesPerc: person.missed_votes_pct
                        })),
                        "most_engaged": greaterTenPercentOfEngaged().map(person => ({
                            Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                            Votes: person.missed_votes,
                            VotesPerc: person.missed_votes_pct
                        }))
                  }
                       ]

                //give VALUES to the global var
                glance = statistics[0];
                tableAtGlance = Object.values(glance);
                engagementTable = statistics[1];

                //Call the functions to display data
                createGlanceTable(tableAtGlance);
                createEngTable(engagementTable["least_engaged"], "least-engaged-table");
                createEngTable(engagementTable["most_engaged"], "most-engaged-table");

            }).catch(function (error) {
                console.log(error)
            })
    }

    //Find how many members are in each party
    function totalMembersPerParty(party) {
        var total = members.filter(member => member.party === party);
        return total;
    }

    //Find the TOT % of voting for each party
    function sumPercentByParty(array) {

        var totalPercent = array.reduce((accumulator, percentage) => accumulator + percentage.votes_with_party_pct, 0);
        return totalPercent;
    }


    //Find the AVERAGE % of voting for each party 
    function findAverageParty(array) {

        var average = sumPercentByParty(totalMembersPerParty(array)) / totalMembersPerParty(array).length;
        if (isNaN(average))
            average = 0

        return average.toFixed(2);
    }

    //Find the TOT of avg % of voting for each party 
    function sumAvgTotal() {
        let demo = (sumPercentByParty(totalMembersPerParty("D")) / totalMembersPerParty("D").length) * (totalMembersPerParty("D").length / members.length);
        if (isNaN(demo))
            demo = 0
        let rep = (sumPercentByParty(totalMembersPerParty("R")) / totalMembersPerParty("R").length) * (totalMembersPerParty("R").length / members.length)
        if (isNaN(rep))
            rep = 0
        let ind = (sumPercentByParty(totalMembersPerParty("I")) / totalMembersPerParty("I").length) * (totalMembersPerParty("I").length / members.length)
        console.log(isNaN(ind))
        if (isNaN(ind))
            ind = 0;

        return (demo + rep + ind).toFixed(2)
    }


    //Generate the 'Senate/House at a glance' table
    function createGlanceTable(array) {

        var demoRow = document.createElement("tr");

        var democrats = demoRow.insertCell();
        democrats.innerHTML = "Democrats";
        var demoTotal = demoRow.insertCell();
        demoTotal.innerHTML = statistics[0]["tot_democrat"];
        var demoAve = demoRow.insertCell();
        demoAve.innerHTML = array[4] + ' %';

        var repRow = document.createElement("tr");

        var republicans = repRow.insertCell();
        republicans.innerHTML = "Republicans";
        var repTotal = repRow.insertCell();
        repTotal.innerHTML = statistics[0]["tot_republican"];
        var repAve = repRow.insertCell();
        repAve.innerHTML = array[5] + ' %';

        var indRow = document.createElement("tr");

        var independent = indRow.insertCell();
        independent.innerHTML = "Independent";
        var indTotal = indRow.insertCell();
        indTotal.innerHTML = statistics[0]["tot_independent"];
        var indAve = indRow.insertCell();
        indAve.innerHTML = array[6] + ' %';

        var totRow = document.createElement("tr");

        var totRepres = totRow.insertCell();
        totRepres.innerHTML = "Total";
        var numRepres = totRow.insertCell();
        numRepres.innerHTML = statistics[0]["tot_represantives"];
        var prcVotes = totRow.insertCell();
        prcVotes.innerHTML = array[7] + ' %';

        document.getElementById("glance-table-body").appendChild(demoRow);
        document.getElementById("glance-table-body").appendChild(repRow);
        document.getElementById("glance-table-body").appendChild(indRow);
        document.getElementById("glance-table-body").appendChild(totRow);
    }

    //Find least engaged     
    function lowestTenPercentOfEngaged() {
        var votes = [];
        var lowestTenPercent = [];

        members.sort(function (a, b) {
            return a.missed_votes_pct - b.missed_votes_pct;
        });
        for (i = 0; i < members.length; i++) {
            votes.push(members[i]);
        }
        for (i = 0; i < votes.length; i++) {
            if (i < ((votes.length) * 0.1)) {
                lowestTenPercent.push(votes[i]);
            } else if (votes[i] == votes[i - 1]) {
                lowestTenPercent.push(votes[i]);
            }
        }
        return lowestTenPercent;
    }

    //Find most engaged     
    function greaterTenPercentOfEngaged() {
        var votes = [];
        var greaterTenPercent = [];

        members.sort(function (a, b) {
            return b.missed_votes_pct - a.missed_votes_pct;
        });
        for (i = 0; i < members.length; i++) {
            votes.push(members[i]);
        }
        for (i = 0; i < votes.length; i++) {
            if (i < ((votes.length) * 0.1)) {
                greaterTenPercent.push(votes[i]);
            } else if (votes[i] == votes[i - 1]) {
                greaterTenPercent.push(votes[i]);
            }
        }
        return greaterTenPercent;
    }

    //Engagement tables
    function createEngTable(array, id) {
        for (var i = 0; i < array.length; i++) {

            var row = document.createElement("tr");
            var names = document.createElement("td");
            var cellContent = names.innerHTML = array[i]["Name"];
            var cellLink = members[i].url;
            names.innerHTML = cellContent.link(cellLink);
            var votes = document.createElement("td");
            votes.innerHTML = array[i]["Votes"];
            var prc = document.createElement("td");
            prc.innerHTML = array[i]["VotesPerc"] + ' %';

            row.appendChild(names)
            row.appendChild(votes)
            row.appendChild(prc)
            document.getElementById(id).appendChild(row);

        }
    }

}

//Loyalty Tables
if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/house-party-loyalty.html' || location.pathname == "/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/senate-party-loyalty.html") {

    var loyaltyTable;

    if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/senate-party-loyalty.html') {
        getData("senate");
    }
    if (location.pathname == '/C:/Users/bambo/OneDrive/Desktop/TGIF%20Project/house-party-loyalty.html') {
        getData("house");
    }

    function getData(chamber) {
        fetch("https://api.propublica.org/congress/v1/113/" + chamber + "/members.json", {

                method: "GET",
                headers: new Headers({
                    "X-API-Key": '8pToDd0vDGdgeKF7E7BH3SfKcegp4QMJowvY45sN'
                })
            })

            .then(function (response) {
                return response.json();
            }).then(function (json) {
                data = json;
                members = data.results[0].members;

                var statistics = { //Loyalty tables
                    "least_loyal": lowestTenPercentOfVoters().map(person => ({
                        Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                        Votes: person.total_votes,
                        VotesPerc: person.votes_with_party_pct
                    })),
                    "most_loyal": greaterTenPercentOfVoters().map(person => ({
                        Name: [person.first_name, person.middle_name, person.last_name].join(" "),
                        Votes: person.total_votes,
                        VotesPerc: person.votes_with_party_pct
                    }))

                }

                loyaltyTable = statistics;
                createLoyalTable(loyaltyTable["least_loyal"], "least-loyal-table");
                createLoyalTable(loyaltyTable["most_loyal"], "most-loyal-table");

            }).catch(function (error) {
                console.log(error)
            })
    }

    //Find least loyal    
    function lowestTenPercentOfVoters() {
        var votes = [];
        var lowestTenPercent = [];

        members.sort(function (a, b) {
            return a.votes_with_party_pct - b.votes_with_party_pct;
        });
        for (i = 0; i < members.length; i++) {
            votes.push(members[i]);
        }
        for (i = 0; i < votes.length; i++) {
            if (i < ((votes.length) * 0.1)) {
                lowestTenPercent.push(votes[i]);
            } else if (votes[i] == votes[i - 1]) {
                lowestTenPercent.push(votes[i]);
            }
        }
        return lowestTenPercent;
    }

    //Find most loyal     
    function greaterTenPercentOfVoters() {
        var votes = [];
        var greaterTenPercent = [];

        members.sort(function (a, b) {
            return b.votes_with_party_pct - a.votes_with_party_pct;
        });
        for (i = 0; i < members.length; i++) {
            votes.push(members[i]);
        }
        for (i = 0; i < votes.length; i++) {
            if (i < ((votes.length) * 0.1)) {
                greaterTenPercent.push(votes[i]);
            } else if (votes[i] == votes[i - 1]) {
                greaterTenPercent.push(votes[i]);
            }
        }
        return greaterTenPercent;
    }

    //Loyalty tables
    function createLoyalTable(array, id) {
        for (var i = 0; i < array.length; i++) {

            var row = document.createElement("tr");
            var names = document.createElement("td");
            var cellContent = names.innerHTML = array[i]["Name"];
            var cellLink = members[i].url;
            names.innerHTML = cellContent.link(cellLink);
            var votes = document.createElement("td");
            votes.innerHTML = array[i]["Votes"];
            var prc = document.createElement("td");
            prc.innerHTML = array[i]["VotesPerc"] + ' %';

            row.appendChild(names)
            row.appendChild(votes)
            row.appendChild(prc)
            document.getElementById(id).appendChild(row);
        }

    }
}
